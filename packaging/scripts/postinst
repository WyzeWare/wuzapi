#!/bin/bash

CONFIG_FILE="/etc/wuzapi/config"
POSTGRES_CONFIG_FILE="/etc/wuzapi/postgres_config"
SQLITE_APP_DB_PATH="/var/lib/wuzapi/app.db"
SQLITE_WA_DB_PATH="/var/lib/wuzapi/wa.db"
LOG_FILE="/var/log/wuzapi/postinstall.log"
USER="wuzapi"
TIMEOUT=30  # Timeout in seconds for user prompts

# Ensure log directory exists and is writable
sudo mkdir -p "$(dirname "$LOG_FILE")" || { echo "Failed to create log directory"; exit 1; }
sudo chown wuzapi:wuzapi "$(dirname "$LOG_FILE")" || { echo "Failed to change ownership of log directory"; exit 1; }
sudo chmod 755 "$(dirname "$LOG_FILE")" || { echo "Failed to set permissions on log directory"; exit 1; }

# Redirect output to log file
exec > >(tee -a "$LOG_FILE") 2>&1

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "Starting Wuzapi post-installation script"

# Ensure wuzapi user exists
if ! id wuzapi &>/dev/null; then
    log "Error: wuzapi user does not exist. This should have been created in preinstall."
    exit 1
fi

prompt_yes_no() {
    while true; do
        read -t $TIMEOUT -p "$1 (y/n): " yn
        if [ $? -ne 0 ]; then
            echo "No input received within $TIMEOUT seconds, defaulting to 'no'."
            yn="n"
        fi
        case $yn in
            [Yy]*) return 0 ;;
            [Nn]*) return 1 ;;
            *) echo "Please answer yes or no." ;;
        esac
    done
}
choose_database_message() {
    echo "Please choose a database:"
    echo "1) PostgreSQL (default)"
    echo "2) SQLite3"
    echo "Enter your choice (1 or 2) [1]:"
}

choose_database() {
    while true; do
        read -t ${TIMEOUT:-30} -p "$(choose_database_message)" choice
        if [ $? -ne 0 ]; then
            echo "No input received within ${TIMEOUT:-30} seconds, defaulting to '1'."
            choice=1
        fi
        choice=${choice:-1}
        case $choice in
            1) echo "postgresql"; return 0 ;;
            2) echo "sqlite3"; return 0 ;;
            *) echo "Invalid choice. Please enter 1 or 2." ;;
        esac
    done
}

configure_sqlite() {
    log "Configuring SQLite3..."

    sudo mkdir -p "$(dirname "$SQLITE_APP_DB_PATH")" || { log "Failed to create directory for SQLite database"; exit 1; }
    sudo chown -R $USER:$USER "$(dirname "$SQLITE_APP_DB_PATH")" || { log "Failed to change ownership of SQLite database directory"; exit 1; }
    sudo chmod 755 "$(dirname "$SQLITE_APP_DB_PATH")" || { log "Failed to set permissions for SQLite database directory"; exit 1; }
    
    sudo mkdir -p "$(dirname "$SQLITE_WA_DB_PATH")" || { log "Failed to create directory for SQLite database"; exit 1; }
    sudo chown -R $USER:$USER "$(dirname "$SQLITE_WA_DB_PATH")" || { log "Failed to change ownership of SQLite database directory"; exit 1; }
    sudo chmod 755 "$(dirname "$SQLITE_WA_DB_PATH")" || { log "Failed to set permissions for SQLite database directory"; exit 1; }

if [ ! -f "$SQLITE_APP_DB_PATH" ]; then
    log "Creating new SQLite database at $SQLITE_APP_DB_PATH"
    if sudo -u wuzapi sqlite3 "$SQLITE_APP_DB_PATH" <<EOF
PRAGMA foreign_keys = ON;
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    token TEXT NOT NULL UNIQUE CHECK(length(token) = 32 AND token GLOB '*[A-Za-z0-9]*'),
    webhook TEXT DEFAULT '',
    jid TEXT DEFAULT '',
    qrcode TEXT DEFAULT '',
    connected INTEGER,
    expiration INTEGER,
    events TEXT DEFAULT 'All'
);
EOF
    then
        log "SQLite database created successfully with unique token"
        sudo chown wuzapi:wuzapi "$SQLITE_APP_DB_PATH"
        sudo chmod 640 "$SQLITE_APP_DB_PATH"
        log "Permissions set on $SQLITE_APP_DB_PATH"
    else
        log "Failed to create SQLite database"
        exit 1
    fi
else
    log "SQLite database already exists at $SQLITE_APP_DB_PATH"
    
    # Add UNIQUE constraint to existing table if it doesn't already exist
    if ! sudo -u wuzapi sqlite3 "$SQLITE_APP_DB_PATH" "PRAGMA index_list('users');" | grep -q "token"; then
        log "Adding UNIQUE constraint to token in existing database"
        if sudo -u wuzapi sqlite3 "$SQLITE_APP_DB_PATH" <<EOF
        CREATE UNIQUE INDEX IF NOT EXISTS idx_users_token ON users(token);
EOF
        then
            log "UNIQUE constraint added successfully"
        else
            log "Failed to add UNIQUE constraint to existing database"
            exit 1
        fi
    else
        log "UNIQUE constraint on token already exists"
    fi

    if prompt_yes_no "Do you want to reset the existing database?"; then
        log "Resetting SQLite database..."
        rm "$SQLITE_APP_DB_PATH"
        rm "$SQLITE_WA_DB_PATH"
        configure_sqlite
        return
    else
        sqlite3 "$SQLITE_APP_DB_PATH" "PRAGMA foreign_keys = ON;"
        sqlite3 "$SQLITE_WA_DB_PATH" "PRAGMA foreign_keys = ON;"
    fi
fi

# Final check
if [ ! -f "$SQLITE_APP_DB_PATH" ]; then
    log "Failed to create SQLite database. Please check your permissions and SQLite installation."
    exit 1
fi

# Check if wuzapi user exists
if id "wuzapi" &>/dev/null; then
    log "User 'wuzapi' exists"
    user_info=$(id wuzapi)
    log "User details: $user_info"
else
    log "Error: User 'wuzapi' does not exist."
    log "Attempting to create user 'wuzapi'..."
    if sudo useradd -r -s /bin/false wuzapi; then
        log "User 'wuzapi' created successfully"
    else
        log "Failed to create user 'wuzapi'. Please create this user manually and run the script again."
        exit 1
    fi
fi

# Verify user's ability to access required directories
if sudo -u wuzapi test -w /var/lib/wuzapi; then
    log "User 'wuzapi' has write access to /var/lib/wuzapi"
else
    log "Error: User 'wuzapi' does not have write access to /var/lib/wuzapi"
    log "Attempting to fix permissions..."
    sudo chown -R wuzapi:wuzapi /var/lib/wuzapi
    sudo chmod -R 755 /var/lib/wuzapi
    if sudo -u wuzapi test -w /var/lib/wuzapi; then
        log "Permissions fixed successfully"
    else
        log "Failed to fix permissions. Please check and fix manually."
        exit 1
    fi
fi

    echo "DB_TYPE=sqlite3" > "$CONFIG_FILE"
    # In the configure_sqlite function:
    echo "APP_DB_PATH=$SQLITE_APP_DB_PATH" >> "$CONFIG_FILE"
    echo "WA_DB_PATH=$SQLITE_WA_DB_PATH" >> "$CONFIG_FILE"
    echo "SQLITE_FOREIGN_KEYS=ON" >> "$CONFIG_FILE"
    log "SQLite3 configuration saved."
}

configure_postgres() {
    if [ -f "$POSTGRES_CONFIG_FILE" ]; then
        log "An existing PostgreSQL configuration file was found at $POSTGRES_CONFIG_FILE"
        if prompt_yes_no "Do you want to use the existing PostgreSQL configuration?"; then
            log "Using existing PostgreSQL configuration."
            return 0
        else
            log "Proceeding with new PostgreSQL configuration..."
        fi
    fi

    if prompt_yes_no "Do you want to use a local PostgreSQL instance with root access?"; then
        if ! sudo -u postgres psql -c '\q' &>/dev/null; then
            log "Failed to connect to local PostgreSQL instance. Please provide custom configuration."
            custom_postgres_config
            return
        fi
        
        log "Successfully connected to local PostgreSQL instance."
        wuzapi_password=$(openssl rand -base64 48)

        # Function to execute PostgreSQL commands
        pg_execute() {
            sudo -u postgres psql -c "$1"
        }

        # Function to execute PostgreSQL commands on a specific database
        pg_execute_db() {
            sudo -u postgres psql -d "$1" -c "$2"
        }

        # Terminate connections and drop databases if they exist
        for db in wuzapi_app wuzapi_wa; do
            if pg_execute "SELECT 1 FROM pg_database WHERE datname='$db'" | grep -q 1; then
                log "Database '$db' exists."
                if prompt_yes_no "Do you want to drop and recreate the '$db' database?"; then
                    log "Dropping database '$db'..."
                    pg_execute "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = '$db';"
                    pg_execute "DROP DATABASE IF EXISTS $db;"
                else
                    log "Continuing with the existing '$db' database."
                fi
            fi
        done

        # Now handle the user
        if pg_execute "SELECT 1 FROM pg_roles WHERE rolname='wuzapi'" | grep -q 1; then
            log "User 'wuzapi' exists."
            if prompt_yes_no "Do you want to delete and recreate the 'wuzapi' user?"; then
                log "Deleting user 'wuzapi'..."
                pg_execute "REASSIGN OWNED BY wuzapi TO postgres;"
                pg_execute "DROP OWNED BY wuzapi;"
                pg_execute "DROP USER IF EXISTS wuzapi;"
                log "Creating user 'wuzapi'..."
                pg_execute "CREATE USER wuzapi WITH PASSWORD '$wuzapi_password';"
            else
                log "Continuing with the existing 'wuzapi' user."
                if prompt_yes_no "Do you want to set a new password for the 'wuzapi' user?"; then
                    pg_execute "ALTER USER wuzapi WITH PASSWORD '$wuzapi_password';"
                else
                    read -t $TIMEOUT -s -p "Enter the current password for 'wuzapi' user: " wuzapi_password
                    if [ $? -ne 0 ]; then
                        echo "No input received within $TIMEOUT seconds, exiting."
                        exit 1
                    fi
                    echo
                fi
            fi
        else
            log "Creating user 'wuzapi'..."
            pg_execute "CREATE USER wuzapi WITH PASSWORD '$wuzapi_password';"
        fi

        # Now recreate the databases
        for db in wuzapi_app wuzapi_wa; do
            if ! pg_execute "SELECT 1 FROM pg_database WHERE datname='$db'" | grep -q 1; then
                log "Creating database '$db'..."
                pg_execute "CREATE DATABASE $db OWNER wuzapi;"
            fi
            log "Granting all privileges on '$db' database to 'wuzapi' user..."
            pg_execute "GRANT ALL PRIVILEGES ON DATABASE $db TO wuzapi;"
        done

        log "Creating schema and granting privileges for wuzapi_app..."
        pg_execute_db "wuzapi_app" "
            CREATE SCHEMA IF NOT EXISTS wuzapi;
            GRANT USAGE ON SCHEMA wuzapi TO wuzapi;
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA wuzapi TO wuzapi;
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA wuzapi TO wuzapi;
        "

        log "Creating users table in wuzapi_app..."
        if pg_execute_db "wuzapi_app" "
            CREATE SCHEMA IF NOT EXISTS wuzapi;
            
            CREATE TABLE IF NOT EXISTS wuzapi.users (
                id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                token TEXT NOT NULL UNIQUE CHECK(length(token) = 32 AND token ~ '^[A-Za-z0-9]{32}$'),
                webhook TEXT DEFAULT '',
                jid TEXT DEFAULT '',
                qrcode TEXT DEFAULT '',
                connected INTEGER,
                expiration INTEGER,
                events TEXT DEFAULT 'All'
            );

            CREATE INDEX IF NOT EXISTS idx_users_token ON wuzapi.users(token);

            GRANT ALL PRIVILEGES ON SCHEMA wuzapi TO wuzapi;
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA wuzapi TO wuzapi;
            GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA wuzapi TO wuzapi;
        "; then
            log "PostgreSQL table created successfully with unique token"
        else
            log "Failed to create PostgreSQL table"
            exit 1
        fi

        log "Creating schema for wuzapi_wa..."
        pg_execute_db "wuzapi_wa" "
            CREATE SCHEMA IF NOT EXISTS whatsmeow;
            GRANT USAGE ON SCHEMA whatsmeow TO wuzapi;
            GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA whatsmeow TO wuzapi;
            GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA whatsmeow TO wuzapi;
        "

        echo "HOST=localhost" > "$POSTGRES_CONFIG_FILE"
        echo "USER=wuzapi" >> "$POSTGRES_CONFIG_FILE"
        echo "PASSWORD=$wuzapi_password" >> "$POSTGRES_CONFIG_FILE"
        echo "APP_DATABASE=wuzapi_app" >> "$POSTGRES_CONFIG_FILE"
        echo "WA_DATABASE=wuzapi_wa" >> "$POSTGRES_CONFIG_FILE"
        log "PostgreSQL configuration saved."
    else
        custom_postgres_config
    fi
}

custom_postgres_config() {
    log "Please provide PostgreSQL configuration details:"
    read -t $TIMEOUT -p "Host: " pg_host
    if [ $? -ne 0 ]; then
        echo "No input received within $TIMEOUT seconds, exiting."
        exit 1
    fi
    read -t $TIMEOUT -p "Username: " pg_user
    if [ $? -ne 0 ]; then
        echo "No input received within $TIMEOUT seconds, exiting."
        exit 1
    fi
    read -t $TIMEOUT -s -p "Password: " pg_password
    if [ $? -ne 0 ]; then
        echo "No input received within $TIMEOUT seconds, exiting."
        exit 1
    fi
    echo

    echo "HOST=$pg_host" > "$POSTGRES_CONFIG_FILE"
    echo "USER=$pg_user" >> "$POSTGRES_CONFIG_FILE"
    echo "PASSWORD=$pg_password" >> "$POSTGRES_CONFIG_FILE"
    log "Custom PostgreSQL configuration saved."
}

if [ -f "$CONFIG_FILE" ]; then
    log "An existing configuration file was found at $CONFIG_FILE"
    if prompt_yes_no "Do you want to override the existing configuration?"; then
        log "Proceeding with new configuration..."
    else
        log "Keeping existing configuration. Installation completed."
        exit 0
    fi
fi

DB_CHOICE=$(choose_database)
mkdir -p /etc/wuzapi || { log "Failed to create configuration directory"; exit 1; }
echo "DB_TYPE=$DB_CHOICE" > "$CONFIG_FILE"

if [ "$DB_CHOICE" = "postgresql" ]; then
    configure_postgres
elif [ "$DB_CHOICE" = "sqlite3" ]; then
    configure_sqlite
fi

log "Database choice ($DB_CHOICE) has been saved to $CONFIG_FILE"

if [ "$DB_CHOICE" = "postgresql" ]; then
    log "PostgreSQL configuration has been saved to $POSTGRES_CONFIG_FILE"
elif [ "$DB_CHOICE" = "sqlite3" ]; then
    log "SQLite3 configuration has been saved to $CONFIG_FILE"
fi

if [ ! -f "/etc/systemd/system/wuzapi.service" ]; then
    log "Creating systemd service file"
    sudo tee /etc/systemd/system/wuzapi.service > /dev/null <<EOF
[Unit]
Description=Wuzapi Service
After=network.target

[Service]
User=wuzapi
Group=wuzapi
ExecStart=/usr/local/bin/wuzapi
Restart=on-failure
RestartSec=5
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=wuzapi

[Install]
WantedBy=multi-user.target
EOF
    sudo chmod 644 /etc/systemd/system/wuzapi.service
fi

log "Reloading systemd"
sudo systemctl daemon-reload

log "Enabling and starting wuzapi service"
sudo systemctl enable wuzapi.service
sudo systemctl start wuzapi.service
sudo systemctl restart wuzapi.service

if sudo systemctl is-active --quiet wuzapi.service; then
    log "Wuzapi service is running"
else
    log "Warning: Wuzapi service failed to start. Please check the logs."
fi

log "Running a test command as the wuzapi user"
sudo -u wuzapi bash <<EOF
echo "This command is run as the wuzapi user"
whoami
id
EOF

log "Wuzapi post-installation completed"
log "Log file is available at $LOG_FILE"

echo "Wuzapi installation completed successfully!"
