#!/bin/bash

CONFIG_FILE="/etc/wuzapi/config"
POSTGRES_CONFIG_FILE="/etc/wuzapi/postgres_config"
SQLITE_DB_PATH="/var/lib/wuzapi/wuzapi.db"

# Function to prompt for yes/no
prompt_yes_no() {
    while true; do
        read -p "$1 (y/n): " yn
        case $yn in
            [Yy]*) return 0 ;;
            [Nn]*) return 1 ;;
            *) echo "Please answer yes or no." ;;
        esac
    done
}

# Function to prompt for database choice
choose_database() {
    while true; do
        echo "Please choose a database:"
        echo "1) PostgreSQL (default)"
        echo "2) SQLite3"
        read -p "Enter your choice (1 or 2) [1]: " choice
        choice=${choice:-1}  # Set default to 1 if input is empty
        case $choice in
            1) echo "postgresql"; return 0 ;;
            2) echo "sqlite3"; return 0 ;;
            *) echo "Invalid choice. Please enter 1 or 2." ;;
        esac
    done
}

# Function to configure SQLite
configure_sqlite() {
    echo "Configuring SQLite3..."
    
    # Create directory if it doesn't exist
    sudo mkdir -p "$(dirname "$SQLITE_DB_PATH")"
    
    # Set appropriate permissions
    sudo chown -R $USER:$USER "$(dirname "$SQLITE_DB_PATH")"
    sudo chmod 755 "$(dirname "$SQLITE_DB_PATH")"
    
    # Create SQLite database if it doesn't exist
    if [ ! -f "$SQLITE_DB_PATH" ]; then
        echo "Creating new SQLite database at $SQLITE_DB_PATH"
        sqlite3 "$SQLITE_DB_PATH" <<EOF
PRAGMA foreign_keys = ON;
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    token TEXT NOT NULL,
    webhook TEXT DEFAULT '',
    jid TEXT DEFAULT '',
    qrcode TEXT DEFAULT '',
    connected INTEGER,
    expiration INTEGER,
    events TEXT DEFAULT 'All'
);
EOF
        if [ $? -ne 0 ]; then
            echo "Failed to create SQLite database. Please check your permissions and SQLite installation."
            exit 1
        fi
    else
        echo "SQLite database already exists at $SQLITE_DB_PATH"
        if prompt_yes_no "Do you want to reset the existing database?"; then
            echo "Resetting SQLite database..."
            rm "$SQLITE_DB_PATH"
            configure_sqlite
            return
        else
            # Enable foreign key support for existing database
            sqlite3 "$SQLITE_DB_PATH" "PRAGMA foreign_keys = ON;"
        fi
    fi
    
    # Update config file
    echo "DB_TYPE=sqlite3" > "$CONFIG_FILE"
    echo "DB_PATH=$SQLITE_DB_PATH" >> "$CONFIG_FILE"
    echo "SQLITE_FOREIGN_KEYS=ON" >> "$CONFIG_FILE"
    echo "SQLite3 configuration saved."
}

# Function to configure PostgreSQL
configure_postgres() {
    if [ -f "$POSTGRES_CONFIG_FILE" ]; then
        echo "An existing PostgreSQL configuration file was found at $POSTGRES_CONFIG_FILE"
        if prompt_yes_no "Do you want to use the existing PostgreSQL configuration?"; then
            echo "Using existing PostgreSQL configuration."
            return 0
        else
            echo "Proceeding with new PostgreSQL configuration..."
        fi
    fi

    if prompt_yes_no "Do you want to use a local PostgreSQL instance with root access?"; then
        # Attempt to connect to PostgreSQL as root
        if sudo -u postgres psql -c '\q' 2>/dev/null; then
            echo "Successfully connected to local PostgreSQL instance."
            
            # Generate a strong password
            wuzapi_password=$(openssl rand -base64 48)

            # Handle user 'wuzapi'
            if sudo -u postgres psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='wuzapi'" | grep -q 1; then
                echo "User 'wuzapi' already exists."
                if prompt_yes_no "Do you want to delete and recreate the 'wuzapi' user?"; then
                    echo "Deleting and recreating user 'wuzapi'..."
                    sudo -u postgres psql -c "DROP USER wuzapi;"
                    sudo -u postgres psql -c "CREATE USER wuzapi WITH PASSWORD '$wuzapi_password';"
                else
                    echo "Continuing with the existing 'wuzapi' user."
                    if prompt_yes_no "Do you want to set a new password for the 'wuzapi' user?"; then
                        sudo -u postgres psql -c "ALTER USER wuzapi WITH PASSWORD '$wuzapi_password';"
                    else
                        read -s -p "Enter the current password for 'wuzapi' user: " wuzapi_password
                        echo
                    fi
                fi
            else
                echo "Creating user 'wuzapi'..."
                sudo -u postgres psql -c "CREATE USER wuzapi WITH PASSWORD '$wuzapi_password';"
            fi
            
            # Handle database 'wuzapi'
            if sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw wuzapi; then
                echo "Database 'wuzapi' already exists."
                if prompt_yes_no "Do you want to drop and recreate the 'wuzapi' database?"; then
                    echo "Dropping and recreating database 'wuzapi'..."
                    sudo -u postgres psql -c "DROP DATABASE wuzapi;"
                    sudo -u postgres psql -c "CREATE DATABASE wuzapi OWNER wuzapi;"
                else
                    echo "Continuing with the existing 'wuzapi' database."
                    # Check if wuzapi user is the owner
                    if ! sudo -u postgres psql -tAc "SELECT pg_catalog.pg_get_userbyid(d.datdba) FROM pg_catalog.pg_database d WHERE d.datname = 'wuzapi';" | grep -q wuzapi; then
                        echo "Changing owner of 'wuzapi' database to 'wuzapi' user..."
                        sudo -u postgres psql -c "ALTER DATABASE wuzapi OWNER TO wuzapi;"
                    fi
                fi
            else
                echo "Creating database 'wuzapi'..."
                sudo -u postgres psql -c "CREATE DATABASE wuzapi OWNER wuzapi;"
            fi
            
            # Ensure wuzapi user has all privileges on wuzapi database
            echo "Granting all privileges on 'wuzapi' database to 'wuzapi' user..."
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE wuzapi TO wuzapi;"

            # Create schema and grant privileges
            echo "Creating schema and granting privileges..."
            sudo -u postgres psql -d wuzapi -c "
                CREATE SCHEMA IF NOT EXISTS wuzapi;
                GRANT USAGE ON SCHEMA wuzapi TO wuzapi;
                GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA wuzapi TO wuzapi;
                GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA wuzapi TO wuzapi;
            "
            
            # Create users table
            echo "Creating users table..."
            sudo -u postgres psql -d wuzapi -c "
                CREATE TABLE IF NOT EXISTS wuzapi.users (
                    id SERIAL PRIMARY KEY,
                    name TEXT NOT NULL,
                    token TEXT NOT NULL,
                    webhook TEXT DEFAULT '',
                    jid TEXT DEFAULT '',
                    qrcode TEXT DEFAULT '',
                    connected INTEGER,
                    expiration INTEGER,
                    events TEXT DEFAULT 'All'
                );
            "
            
            echo "HOST=localhost" > "$POSTGRES_CONFIG_FILE"
            echo "USER=wuzapi" >> "$POSTGRES_CONFIG_FILE"
            echo "PASSWORD=$wuzapi_password" >> "$POSTGRES_CONFIG_FILE"
            echo "DATABASE=wuzapi" >> "$POSTGRES_CONFIG_FILE"
            echo "Local PostgreSQL configuration saved."
        else
            echo "Failed to connect to local PostgreSQL instance. Please provide custom configuration."
            custom_postgres_config
        fi
    else
        custom_postgres_config
    fi
}

# Function to get custom PostgreSQL configuration
custom_postgres_config() {
    echo "Please provide PostgreSQL configuration details:"
    read -p "Host: " pg_host
    read -p "Username: " pg_user
    read -s -p "Password: " pg_password
    echo

    echo "HOST=$pg_host" > "$POSTGRES_CONFIG_FILE"
    echo "USER=$pg_user" >> "$POSTGRES_CONFIG_FILE"
    echo "PASSWORD=$pg_password" >> "$POSTGRES_CONFIG_FILE"
    echo "Custom PostgreSQL configuration saved."
}

# Check if configuration file exists
if [ -f "$CONFIG_FILE" ]; then
    echo "An existing configuration file was found at $CONFIG_FILE"
    if prompt_yes_no "Do you want to override the existing configuration?"; then
        echo "Proceeding with new configuration..."
    else
        echo "Keeping existing configuration. Installation completed."
        exit 0
    fi
fi

# Prompt user for database choice
DB_CHOICE=$(choose_database)

# Save the choice to a configuration file
mkdir -p /etc/wuzapi
echo "DB_TYPE=$DB_CHOICE" > "$CONFIG_FILE"

if [ "$DB_CHOICE" = "postgresql" ]; then
    configure_postgres
elif [ "$DB_CHOICE" = "sqlite3" ]; then
    configure_sqlite
fi

echo "Database choice ($DB_CHOICE) has been saved to $CONFIG_FILE"

if [ "$DB_CHOICE" = "postgresql" ]; then
    echo "PostgreSQL configuration has been saved to $POSTGRES_CONFIG_FILE"
elif [ "$DB_CHOICE" = "sqlite3" ]; then
    echo "SQLite3 configuration has been saved to $CONFIG_FILE"
fi

echo "Wuzapi installation completed successfully!"
